package prototype.javabot.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import prototype.javabot.model.ContentIdea;
import prototype.javabot.model.IdeaStatus;
import prototype.javabot.model.aiSettings.CommunicationStyle;
import prototype.javabot.model.aiSettings.ContentLength;
import prototype.javabot.model.aiSettings.ResponseLanguage;
import prototype.javabot.model.aiSettings.UserAiSetting;

import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class BotCommandService {

    private final ContentService contentService;
    private final UserStateService userStateService;

    public SendMessage handleStartCommand(String chatId) {
        String welcomeText = """
                ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ContentMaker Bot!
                
                                –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò.
                
                                üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                                /help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
                                /list - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–¥–µ–π
                                /new - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–¥–µ—é
                
                                –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç!
                """;

        return SendMessage.builder()
                .chatId(chatId)
                .text(welcomeText)
                .replyMarkup(createMainMenuKeyboard())
                .build();
    }

    public SendMessage handleHelpCommand(String chatId) {
        String helpText = """
                üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:
                
                                /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                                /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
                                /list - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–¥–µ–∏
                                /new - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–¥–µ—é
                                /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ AI
                
                                üéØ –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
                                ‚Ä¢ –ü–æ—Å—Ç—ã –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π
                                ‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è Reels
                                ‚Ä¢ –ò–¥–µ–∏ –¥–ª—è Stories
                                ‚Ä¢ –•–µ—à—Ç–µ–≥–∏
                                ‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–∫–∏
                
                                üí° –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç!
                """;

        return SendMessage.builder()
                .chatId(chatId)
                .text(helpText)
                .build();
    }

    public SendMessage handleListCommand(String chatId) {
        List<ContentIdea> ideas = contentService.findAll();

        if (ideas.isEmpty()) {
            return SendMessage.builder()
                    .chatId(chatId)
                    .text("\uD83D\uDCDD –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–¥–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!")
                    .replyMarkup(createMainMenuKeyboard())
                    .build();
        }

        StringBuilder messageText = new StringBuilder("\uD83D\uDCCB –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–¥–µ–∏:\n\n");
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

        List<ContentIdea> recentIdeas = ideas.stream()
                .sorted((a, b) -> b.getCreatedAt().compareTo(a.getCreatedAt()))
                .limit(10)
                .toList();
        recentIdeas.forEach(idea -> {
            String statusEmoji = getStatusEmoji(idea.getStatus());
            String shortPrompt = idea.getPrompt().length() > 50
                    ? idea.getPrompt().substring(0, 50) + "..."
                    : idea.getPrompt();

            messageText.append(String.format(
                    "%s ID: %d\n" +
                            "üìù %s\n" +
                            "üïí %s\n\n",
                    statusEmoji,
                    idea.getId(),
                    shortPrompt,
                    idea.getCreatedAt().format(formatter)
            ));
        });

        return SendMessage.builder()
                .chatId(chatId)
                .text(messageText.toString())
                .replyMarkup(createIdeaManagementKeyboard(recentIdeas))
                .build();
    }

    public SendMessage handleNewContentCommand(String chatId) {
        String text = "\uD83C\uDFAF –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:";

        return SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .replyMarkup(createContentTypeKeyboard())
                .build();
    }

    public SendMessage handleSettingCommand(String chatId) {
        UserAiSetting settings = userStateService.getUserAiSettings(chatId);

        String settingText = String.format(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI\n\n" +
                        "üåç –Ø–∑—ã–∫: %s\n" +
                        "üìè –î–ª–∏–Ω–∞: %s\n" +
                        "üé≠ –°—Ç–∏–ª—å: %s\n\n" +
                        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
                settings.getLanguage().getDisplayName(),
                settings.getLength().getDisplayName(),
                settings.getStyle().getDisplayName()
        );

        return SendMessage.builder()
                .chatId(chatId)
                .text(settingText)
                .replyMarkup(createSettingMenuKeyboard())
                .build();
    }

    public SendMessage handleLanguageSettingsCommand(String chatId) {
        String text = "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–æ–≤ AI:";

        return SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .replyMarkup(createLanguageKeyboard())
                .build();
    }

    public SendMessage handleLengthSettingsCommand(String chatId) {
        String text = "üìè –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞:";

        return SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .replyMarkup(createLengthKeyboard())
                .build();
    }

    public SendMessage handleStyleSettingsCommand(String chatId) {
        String text = "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:";

        return SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .replyMarkup(createStyleKeyboard())
                .build();
    }

    public SendMessage handleStatusCommand(String chatId) {
        String text = "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏–¥–µ–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";

        return SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .replyMarkup(createStatusManagementKeyboard())
                .build();
    }

    public SendMessage handleFilteredListCommand(String chatId, IdeaStatus status) {
        List<ContentIdea> ideas = contentService.findAll();

        List<ContentIdea> filteredIdeas = ideas.stream()
                .filter(idea -> idea.getStatus() == status)
                .sorted((a, b) -> b.getCreatedAt().compareTo(a.getCreatedAt()))
                .limit(10)
                .toList();

        if (filteredIdeas.isEmpty()) {
            String statusName = getStatusName(status);
            return SendMessage.builder()
                    .chatId(chatId)
                    .text(String.format("üìù –£ –≤–∞—Å –Ω–µ—Ç –∏–¥–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º \"%s\"", statusName))
                    .replyMarkup(createStatusManagementKeyboard())
                    .build();
        }

        StringBuilder messageText = new StringBuilder(
                String.format("üìã –ò–¥–µ–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º \"%s\":\n\n", getStatusName(status))
        );
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yy HH:mm");

        filteredIdeas.forEach(idea -> {
            String statusEmoji = getStatusEmoji(idea.getStatus());
            String shortPrompt = idea.getPrompt().length() > 50
                    ? idea.getPrompt().substring(0, 50) + "..."
                    : idea.getPrompt();

            messageText.append(String.format(
                    "%s ID: %d\n" +
                            "üìù %s\n" +
                            "üïí %s\n\n",
                    statusEmoji,
                    idea.getId(),
                    shortPrompt,
                    idea.getCreatedAt().format(formatter)
            ));
        });
        return SendMessage.builder()
                .chatId(chatId)
                .text(messageText.toString())
                .replyMarkup(createIdeaManagementKeyboard(filteredIdeas))
                .build();

    }

    public SendMessage handleChangeIdeaStatusCommand(String chatId, Long ideaId) {
        ContentIdea idea = contentService.findById(ideaId);

        if (idea == null) {
            return SendMessage.builder()
                    .chatId(chatId)
                    .text("‚ùå –ò–¥–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    .replyMarkup(createStatusManagementKeyboard())
                    .build();
        }

        String shortPrompt = idea.getPrompt().length() > 50
                ? idea.getPrompt().substring(0, 50) + "..."
                : idea.getPrompt();

        String text = String.format(
                "üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–¥–µ–∏ #%d\n\n" +
                        "–¢–µ–∫—Å—Ç: %s\n\n" +
                        "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: %s %s\n\n" +
                        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
                idea.getId(),
                shortPrompt,
                getStatusEmoji(idea.getStatus()),
                getStatusName(idea.getStatus())
        );
        return SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .replyMarkup(createChangeStatusKeyboard(ideaId))
                .build();
    }

    private InlineKeyboardMarkup createIdeaManagementKeyboard(List<ContentIdea> ideas) {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        ideas.stream().limit(5).forEach(idea -> {
            List<InlineKeyboardButton> row = new ArrayList<>();
            String shortText = idea.getPrompt().length() > 20
                    ? idea.getPrompt().substring(0, 20)
                    : idea.getPrompt();

            row.add(createInLineButton(
                    String.format("‚úèÔ∏è #%d: %s", idea.getId(), shortText),
                    "manage_idea_" + idea.getId()
            ));
            keyboard.add(row);
        });

        List<InlineKeyboardButton> navRow = new ArrayList<>();
        navRow.add(createInLineButton("üìä –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞–º–∏", "status_management"));
        navRow.add(createInLineButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"));
        keyboard.add(navRow);

        return InlineKeyboardMarkup.builder().keyboard(keyboard).build();
    }

    public InlineKeyboardMarkup createAiResponseActionsKeyboard() {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createInLineButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", "retry_generation"));
        row1.add(createInLineButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", "edit_request"));

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createInLineButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"));

        keyboard.add(row1);
        keyboard.add(row2);

        return InlineKeyboardMarkup.builder()
                .keyboard(keyboard)
                .build();
    }

    private InlineKeyboardMarkup createMainMenuKeyboard() {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createInLineButton("üìù –ù–æ–≤–∞—è –∏–¥–µ—è", "new_content"));
        row1.add(createInLineButton("üìã –ú–æ–∏ –∏–¥–µ–∏", "list_ideas"));

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createInLineButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings_menu"));
        row2.add(createInLineButton("‚ùì –ü–æ–º–æ—â—å", "help"));

        keyboard.add(row1);
        keyboard.add(row2);

        return InlineKeyboardMarkup.builder().keyboard(keyboard).build();
    }

    private InlineKeyboardMarkup createContentTypeKeyboard() {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createInLineButton("üì± –ü–æ—Å—Ç", "content_post"));
        row1.add(createInLineButton("üé¨ Reels", "content_reel"));

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createInLineButton("üìñ Story", "content_story"));
        row2.add(createInLineButton("#Ô∏è‚É£ –•–µ—à—Ç–µ–≥–∏", "content_hashtags"));

        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(createInLineButton("üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫", "content_title"));
        row3.add(createInLineButton("üîô –ù–∞–∑–∞–¥", "back_to_main"));

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        return InlineKeyboardMarkup.builder().keyboard(keyboard).build();
    }

    private InlineKeyboardMarkup createListActionsKeyboard() {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(createInLineButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "refresh_list"));
        row.add(createInLineButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"));

        keyboard.add(row);

        return InlineKeyboardMarkup.builder().keyboard(keyboard).build();
    }

    public InlineKeyboardMarkup createSettingMenuKeyboard() {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createInLineButton("üåç –Ø–∑—ã–∫", "settings_language"));
        row1.add(createInLineButton("üìè –î–ª–∏–Ω–∞", "settings_length"));

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createInLineButton("üé≠ –°—Ç–∏–ª—å", "settings_style"));
        row2.add(createInLineButton("üîô –ù–∞–∑–∞–¥", "back_to_main"));

        keyboard.add(row1);
        keyboard.add(row2);

        return InlineKeyboardMarkup.builder().keyboard(keyboard).build();
    }

    private InlineKeyboardMarkup createLanguageKeyboard() {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createInLineButton(ResponseLanguage.RUSSIAN.getDisplayName(), ResponseLanguage.RUSSIAN.getCallbackData()));

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createInLineButton(ResponseLanguage.ENGLISH.getDisplayName(), ResponseLanguage.ENGLISH.getCallbackData()));

        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(createInLineButton(ResponseLanguage.UKRAINIAN.getDisplayName(), ResponseLanguage.UKRAINIAN.getCallbackData()));

        List<InlineKeyboardButton> row4 = new ArrayList<>();
        row4.add(createInLineButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "settings_menu"));

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);
        keyboard.add(row4);

        return InlineKeyboardMarkup.builder().keyboard(keyboard).build();
    }

    private InlineKeyboardMarkup createLengthKeyboard() {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createInLineButton(ContentLength.SHORT.getDisplayName(), ContentLength.SHORT.getCallbackData()));
        row1.add(createInLineButton(ContentLength.MEDIUM.getDisplayName(), ContentLength.MEDIUM.getCallbackData()));

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createInLineButton(ContentLength.LONG.getDisplayName(), ContentLength.LONG.getCallbackData()));
        row2.add(createInLineButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "settings_menu"));

        keyboard.add(row1);
        keyboard.add(row2);

        return InlineKeyboardMarkup.builder().keyboard(keyboard).build();
    }

    private InlineKeyboardMarkup createStyleKeyboard() {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createInLineButton(CommunicationStyle.FRIENDLY.getDisplayName(), CommunicationStyle.FRIENDLY.getCallbackData()));

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createInLineButton(CommunicationStyle.BUSINESS.getDisplayName(), CommunicationStyle.BUSINESS.getCallbackData()));

        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(createInLineButton(CommunicationStyle.EMOTIONAL.getDisplayName(), CommunicationStyle.EMOTIONAL.getCallbackData()));

        List<InlineKeyboardButton> row4 = new ArrayList<>();
        row4.add(createInLineButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "settings_menu"));

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);
        keyboard.add(row4);

        return InlineKeyboardMarkup.builder().keyboard(keyboard).build();
    }

    public InlineKeyboardMarkup createStatusManagementKeyboard() {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createInLineButton("üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏", "filter_status_DRAFT"));
        row1.add(createInLineButton("‚è≥ –í —Ä–∞–±–æ—Ç–µ", "filter_status_IN_PROGRESS"));

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createInLineButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ", "filter_status_PUBLISHED"));
        row2.add(createInLineButton("üìã –í—Å–µ –∏–¥–µ–∏", "list_ideas"));

        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(createInLineButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"));

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        return InlineKeyboardMarkup.builder().keyboard(keyboard).build();
    }

    private InlineKeyboardMarkup createFilteredListActionsKeyboard() {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(createInLineButton("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏", "status_management"));
        row.add(createInLineButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"));

        keyboard.add(row);

        return InlineKeyboardMarkup.builder().keyboard(keyboard).build();
    }

    private InlineKeyboardMarkup createChangeStatusKeyboard(Long ideaId) {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createInLineButton("üìù –ß–µ—Ä–Ω–æ–≤–∏–∫", "change_status_" + ideaId + "_DRAFT"));
        row1.add(createInLineButton("‚è≥ –í —Ä–∞–±–æ—Ç–µ", "change_status_" + ideaId + "_IN_PROGRESS"));

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createInLineButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", "change_status_" + ideaId + "_PUBLISHED"));
        row2.add(createInLineButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", "delete_idea_" + ideaId));

        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(createInLineButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", "status_management"));

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        return InlineKeyboardMarkup.builder().keyboard(keyboard).build();
    }

    private InlineKeyboardButton createInLineButton(String text, String callbackData) {
        return InlineKeyboardButton.builder()
                .text(text)
                .callbackData(callbackData)
                .build();
    }

    private String getStatusName(IdeaStatus status) {
        return switch (status) {
            case DRAFT -> "–ß–µ—Ä–Ω–æ–≤–∏–∫";
            case IN_PROGRESS -> "–í —Ä–∞–±–æ—Ç–µ";
            case PUBLISHED -> "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ";
        };
    }

    private String getStatusEmoji(IdeaStatus status) {
        return switch (status) {
            case DRAFT -> "üìù";
            case IN_PROGRESS -> "‚è≥";
            case PUBLISHED -> "‚úÖ";
        };
    }
}
